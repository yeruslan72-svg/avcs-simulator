import streamlit as st
import numpy as np
import plotly.graph_objects as go
import plotly.subplots as sp
import time
import io

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ ====================
st.set_page_config(page_title="AVCS DNA Multi-Channel Simulator", layout="wide")
st.title("üè≠ AVCS DNA Multi-Channel Industrial Simulator")
st.markdown("""
**Operational Excellence, Delivered** - Multi-sensor vibration control with angular damper configuration
""")

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø ====================
class EquipmentConfig:
    def __init__(self):
        self.sensors = {
            'Motor_End': {'position': 'Motor Side', 'sensitivity': 100, 'channel': 1},
            'Pump_End': {'position': 'Pump Side', 'sensitivity': 100, 'channel': 2}
        }
        self.dampers = {
            'Damper_1': {'position': 'Front-Left', 'angle': 45, 'force_range': (0, 8000)},
            'Damper_2': {'position': 'Front-Right', 'angle': 45, 'force_range': (0, 8000)},
            'Damper_3': {'position': 'Rear-Left', 'angle': 45, 'force_range': (0, 8000)},
            'Damper_4': {'position': 'Rear-Right', 'angle': 45, 'force_range': (0, 8000)}
        }
        self.sample_rates = [1000, 2500, 5000, 10000, 20000]
        self.accelerometer_types = {
            'ICP_603C01': {'sensitivity': 100, 'range': 50, 'freq_range': (0.5, 10000)},
            'PCB_352C23': {'sensitivity': 10, 'range': 500, 'freq_range': (0.2, 10000)},
            'IMI_608A11': {'sensitivity': 1000, 'range': 5, 'freq_range': (1, 2000)}
        }

# ==================== –§–£–ù–ö–¶–ò–ò –°–ò–ú–£–õ–Ø–¶–ò–ò ====================
def generate_vibration_signal(time_points, fault_type, severity, sensor_position, base_freq=50):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–∞"""
    base_signal = np.sin(2 * np.pi * base_freq * time_points)
    base_signal += 0.05 * np.random.randn(len(time_points))
    
    # –†–∞–∑–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏ –Ω–∞ Motor End vs Pump End
    if sensor_position == 'Motor_End':
        # Motor End: –±–æ–ª—å—à–µ –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        high_freq = 0.3 * np.sin(2 * np.pi * 200 * time_points)
        base_signal += 0.1 * high_freq
    else:  # Pump_End
        # Pump End: –±–æ–ª—å—à–µ –Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        low_freq = 0.4 * np.sin(2 * np.pi * 25 * time_points)
        base_signal += 0.15 * low_freq
    
    if fault_type == "Normal Operation":
        return base_signal, np.zeros_like(time_points)
    
    elif "Bearing_Fault" in fault_type:
        impulse_prob = 0.008 * severity
        impulses = (np.random.rand(len(time_points)) < impulse_prob).astype(float) * severity * 0.6
        return base_signal + impulses, impulses
    
    elif fault_type == "Imbalance":
        imbalance_effect = 0.4 * severity
        modulated = base_signal * (1 + imbalance_effect * np.sin(2 * np.pi * base_freq * time_points))
        return modulated, np.zeros_like(time_points)
    
    elif fault_type == "Misalignment":
        harmonic_2x = 0.5 * severity * np.sin(2 * np.pi * 2 * base_freq * time_points + np.pi/4)
        harmonic_3x = 0.3 * severity * np.sin(2 * np.pi * 3 * base_freq * time_points + np.pi/6)
        return base_signal + harmonic_2x + harmonic_3x, np.zeros_like(time_points)
    
    return base_signal, np.zeros_like(time_points)

def calculate_angular_damper_force(dampers_config, fault_detected, severity, sensor_position):
    """–†–∞—Å—á–µ—Ç —Å–∏–ª –¥–µ–º–ø—Ñ–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —É–≥–ª–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    forces = {}
    if not fault_detected:
        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å–∏–ª—ã
        for damper_id in dampers_config:
            forces[damper_id] = 500  # –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞
    else:
        # –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ - —Ä–∞–∑–Ω—ã–µ —Å–∏–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–º–ø—Ñ–µ—Ä–æ–≤
        base_force = min(8000, severity * 1600)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–∞ –∏ –¥–µ–º–ø—Ñ–µ—Ä–∞
        for damper_id, config in dampers_config.items():
            position_factor = 1.0
            
            # –£—á–µ—Ç —É–≥–ª–∞ –¥–µ–º–ø—Ñ–µ—Ä–∞ (45 –≥—Ä–∞–¥—É—Å–æ–≤)
            angle_factor = np.sin(np.radians(config['angle']))  # –°–∏–Ω—É—Å 45¬∞ = 0.707
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            if 'Front' in config['position'] and sensor_position == 'Motor_End':
                position_factor = 1.2  # –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–µ –¥–µ–º–ø—Ñ–µ—Ä—ã —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ—Ç–æ—Ä–∞
            elif 'Rear' in config['position'] and sensor_position == 'Pump_End':
                position_factor = 1.2  # –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∑–∞–¥–Ω–∏–µ –¥–µ–º–ø—Ñ–µ—Ä—ã —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞—Å–æ—Å–∞
            
            forces[damper_id] = base_force * angle_factor * position_factor
    
    return forces

def apply_damper_suppression(signal_data, damper_forces, time_points):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –¥–µ–º–ø—Ñ–µ—Ä–æ–≤"""
    total_force = sum(damper_forces.values())
    suppression_factor = np.exp(-0.25 * total_force / 8000)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–∫–ª–∏–∫–∞ –¥–µ–º–ø—Ñ–µ—Ä–æ–≤
    response_delay = int(0.02 * len(time_points))  # 20ms –∑–∞–¥–µ—Ä–∂–∫–∞
    suppressed_signal = np.copy(signal_data)
    if response_delay < len(signal_data):
        suppressed_signal[response_delay:] = signal_data[response_delay:] * suppression_factor
    
    return suppressed_signal

def calculate_multi_channel_features(signals_dict):
    """–†–∞—Å—á–µ—Ç —Ñ–∏—á –¥–ª—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    features_dict = {}
    
    for sensor_id, signal_data in signals_dict.items():
        if len(signal_data) == 0:
            features_dict[sensor_id] = {'rms': 0, 'pkpk': 0, 'crest': 0}
            continue
            
        rms = np.sqrt(np.mean(signal_data**2))
        pkpk = np.ptp(signal_data)
        crest = np.max(np.abs(signal_data)) / rms if rms > 0 else 0
        
        features_dict[sensor_id] = {
            'rms': rms,
            'pkpk': pkpk, 
            'crest': crest,
            'position': sensor_id
        }
    
    return features_dict

# ==================== –ò–ù–¢–ï–†–§–ï–ô–° ====================
config = EquipmentConfig()

col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("üéõÔ∏è Equipment Configuration")
    
    # –í—ã–±–æ—Ä –¥–∞—Ç—á–∏–∫–æ–≤
    st.markdown("**üì° Sensor Configuration**")
    sensor_motor = st.checkbox("Motor End Sensor", value=True, key="sensor_motor")
    sensor_pump = st.checkbox("Pump End Sensor", value=True, key="sensor_pump")
    
    # –¢–∏–ø –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞
    accelerometer_type = st.selectbox("Accelerometer Type", 
                                     list(config.accelerometer_types.keys()),
                                     key="accel_type")
    
    # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    sample_rate = st.selectbox("Sample Rate (Hz)", config.sample_rates, index=3, key="sample_rate")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
    st.markdown("**‚ö° Fault Configuration**")
    fault_type = st.selectbox("Fault Type", [
        "Normal Operation", "Bearing_Fault_Mild", "Bearing_Fault_Severe", 
        "Imbalance", "Misalignment"
    ], key="fault_type")
    
    severity = st.slider("Fault Severity", 1, 5, 1, key="severity")
    dampers_enabled = st.checkbox("Enable Active Dampers", value=True, key="dampers")
    
    run_simulation = st.button("‚ñ∂Ô∏è Start Multi-Channel Simulation", type="primary")

with col2:
    st.subheader("üìä Multi-Channel Monitoring")
    
    if run_simulation:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        animation_placeholder = st.empty()
        status_display = st.empty()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä—ã
        active_sensors = []
        if sensor_motor: active_sensors.append('Motor_End')
        if sensor_pump: active_sensors.append('Pump_End')
        
        if not active_sensors:
            st.error("‚ùå Please select at least one sensor")
            st.stop()
        
        num_frames = 12
        time_points = np.linspace(0, 0.1, int(sample_rate * 0.1))
        
        for frame in range(num_frames):
            status_display.text(f"üé¨ Multi-Channel Simulation: Frame {frame+1}/{num_frames}")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            signals = {}
            suppressed_signals = {}
            damper_forces_history = {}
            
            for sensor_id in active_sensors:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–∞
                signal_data, impulses = generate_vibration_signal(
                    time_points, fault_type, severity, sensor_id
                )
                signals[sensor_id] = signal_data
                
                # –†–∞—Å—á–µ—Ç —Å–∏–ª –¥–µ–º–ø—Ñ–µ—Ä–æ–≤
                fault_detected = fault_type != "Normal Operation"
                damper_forces = calculate_angular_damper_force(
                    config.dampers, fault_detected, severity, sensor_id
                )
                damper_forces_history[sensor_id] = damper_forces
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è
                if dampers_enabled and fault_detected:
                    suppressed_signals[sensor_id] = apply_damper_suppression(
                        signal_data, damper_forces, time_points
                    )
                else:
                    suppressed_signals[sensor_id] = signal_data
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            fig = sp.make_subplots(
                rows=len(active_sensors), cols=1,
                subplot_titles=[f"{sensor_id} - {config.sensors[sensor_id]['position']}" 
                               for sensor_id in active_sensors],
                vertical_spacing=0.1
            )
            
            for i, sensor_id in enumerate(active_sensors):
                row = i + 1
                
                # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                fig.add_trace(
                    go.Scatter(x=time_points*1000, y=signals[sensor_id],
                              mode='lines', name=f'{sensor_id} Original',
                              line=dict(color='blue', width=2)),
                    row=row, col=1
                )
                
                # –ü–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if dampers_enabled and fault_detected:
                    fig.add_trace(
                        go.Scatter(x=time_points*1000, y=suppressed_signals[sensor_id],
                                  mode='lines', name=f'{sensor_id} Suppressed',
                                  line=dict(color='green', width=2)),
                        row=row, col=1
                    )
            
            fig.update_layout(height=300 * len(active_sensors), 
                            title_text="Multi-Channel Vibration Monitoring")
            fig.update_xaxes(title_text="Time (ms)")
            fig.update_yaxes(title_text="Amplitude")
            
            animation_placeholder.plotly_chart(fig, use_container_width=True)
            time.sleep(0.3)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        status_display.success("‚úÖ Multi-channel simulation completed!")
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–ø—Ñ–µ—Ä–∞–º–∏
        st.subheader("üîß Damper Control Panel")
        damper_cols = st.columns(4)
        
        final_damper_forces = calculate_angular_damper_force(
            config.dampers, fault_detected, severity, 'Motor_End'
        )
        
        for i, (damper_id, force) in enumerate(final_damper_forces.items()):
            with damper_cols[i]:
                config_data = config.dampers[damper_id]
                st.metric(
                    f"{damper_id}",
                    f"{force:.0f} N",
                    f"Angle: {config_data['angle']}¬∞"
                )
        
        # –ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        features_dict = calculate_multi_channel_features(signals)
        
        st.subheader("üîç Multi-Sensor Engineering Data")
        sensor_cols = st.columns(len(active_sensors))
        
        for i, sensor_id in enumerate(active_sensors):
            with sensor_cols[i]:
                st.markdown(f"**{sensor_id}**")
                features = features_dict[sensor_id]
                st.metric("RMS", f"{features['rms']:.4f}")
                st.metric("Peak-to-Peak", f"{features['pkpk']:.3f}")
                st.metric("Crest Factor", f"{features['crest']:.2f}")

# ==================== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï ====================
with st.expander("üè≠ Industrial System Overview"):
    st.markdown("""
    **Equipment Configuration:**
    - **Motor End Sensor**: Vibration monitoring at drive unit
    - **Pump End Sensor**: Vibration monitoring at driven unit  
    - **4 Angular Dampers**: 45¬∞ positioning for optimal force distribution
    - **Control Cabinet**: Real-time signal processing and damper control
    
    **Damper Positioning:**
    ```
    Front-Left (45¬∞)      Front-Right (45¬∞)
          [ Motor ] ‚Üí [ Pump ]
    Rear-Left (45¬∞)       Rear-Right (45¬∞)
    ```
    
    **Sensor Specifications:**
    - ICP/Accelerometer types with different sensitivity ranges
    - Sample rates from 1kHz to 20kHz
    - Multi-channel synchronous acquisition
    """)

st.markdown("---")
st.markdown("**Operational Excellence, Delivered** | Multi-Channel AVCS DNA Simulator v4.0")
