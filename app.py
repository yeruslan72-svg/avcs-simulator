import streamlit as st
import numpy as np
from scipy import signal
from scipy.stats import kurtosis
import plotly.graph_objects as go

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="AVCS Simulator", layout="wide")
st.title("üõ†Ô∏è AVCS Technology Simulator")
st.markdown("""
**Experience the power of Machine Learning-driven Active Vibration Control.**
This simulator demonstrates how our system detects faults in real-time on FPSO rotating equipment.
""")

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("Configuration")
    # 1. –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
    fault_type = st.selectbox(
        "**Select Fault Type**",
        ["Normal Operation", "Bearing Fault (Mild)", "Bearing Fault (Severe)", "Imbalance", "Misalignment"]
    )

    # 2. –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è —Ç—è–∂–µ—Å—Ç–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
    severity = st.slider("**Fault Severity**", 1, 5, 1)

    # 3. –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
    run_simulation = st.button("‚ñ∂Ô∏è Run Simulation", type="primary")

with col2:
    st.subheader("Simulation Output")

    if run_simulation:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        sample_rate = 10000
        duration = 0.1
        t = np.linspace(0, duration, int(sample_rate * duration))
        base_signal = np.sin(2 * np.pi * 50 * t) + 0.1 * np.random.randn(len(t))

        # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
        if fault_type == "Normal Operation":
            signal_data = base_signal
        elif "Bearing Fault" in fault_type:
            impulse_prob = 0.001 * severity
            impulses = (np.random.rand(len(t)) < impulse_prob).astype(float) * severity * 0.5
            signal_data = base_signal + impulses
        elif fault_type == "Imbalance":
          # –£–°–ò–õ–ï–ù–ù–û–ï –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—è—Ü–∏—é
            imbalance_effect = 0.5 * severity  # –°–∏–ª–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
            signal_data = base_signal * (1 + imbalance_effect * np.sin(2 * np.pi * 50 * t))
          # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–∏–µ –∏–º–ø—É–ª—å—Å—ã –æ—Ç –≤–∏–±—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö –æ–±–æ—Ä–æ—Ç–∞—Ö
            impulses = (np.random.rand(len(t)) < 0.003 * severity).astype(float) * severity * 0.3
            signal_data = signal_data + impulses
        elif fault_type == "Misalignment":
          # –°–ò–õ–¨–ù–û –£–°–ò–õ–ï–ù–ù–û–ï –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ Misalignment
          # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—â–Ω—É—é –≤—Ç–æ—Ä—É—é –≥–∞—Ä–º–æ–Ω–∏–∫—É (2X) –∏ –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–º–ø—É–ª—å—Å–æ–≤
            harmonic_2x = 0.7 * severity * np.sin(2 * np.pi * 100 * t + np.pi/4)
           # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–º–ø—É–ª—å—Å—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ misalignment
            impulses = (np.random.rand(len(t)) < 0.005 * severity).astype(float) * severity * 0.8
            signal_data = base_signal + harmonic_2x + impulses

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        rms = np.sqrt(np.mean(signal_data**2))
        peak_to_peak = np.ptp(signal_data)
        crest_factor = np.max(np.abs(signal_data)) / rms if rms > 0 else 0

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        fig = go.Figure()
        fig.add_trace(go.Scatter(y=signal_data, mode='lines', name='Vibration Signal', line=dict(color='blue')))
        fig.update_layout(title="Raw Vibration Signal", xaxis_title="Samples", yaxis_title="Amplitude")
        st.plotly_chart(fig, use_container_width=True)

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã ML-–º–æ–¥–µ–ª–∏
        if crest_factor > 3.0:
            st.error(f"üö® **ANOMALY DETECTED!**")
            st.success(f"**Diagnosis:** {fault_type} (Confidence: {severity/5*100:.0f}%)")
            st.markdown("> **On a real AVCS:** MR dampers would be activated to suppress vibration.")
        else:
            st.success("‚úÖ **SYSTEM NORMAL**")
            st.markdown("> **On a real AVCS:** Dampers in adaptive mode.")

        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∏—á–∏
        st.subheader("Extracted Features")
        col_metric1, col_metric2, col_metric3 = st.columns(3)
        col_metric1.metric("RMS", f"{rms:.4f}")
        col_metric2.metric("Peak-to-Peak", f"{peak_to_peak:.2f}")
        col_metric3.metric("Crest Factor", f"{crest_factor:.2f}")

st.markdown("---")
st.caption("¬© Yeruslan Technologies | Active Vibration Control System (AVCS) Simulator")
