import streamlit as st
import numpy as np
import plotly.graph_objects as go
import plotly.subplots as sp
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="AVCS DNA Simulator | Live Animation", layout="wide")
st.title("üõ†Ô∏è AVCS DNA Technology Simulator - Live Animation")
st.markdown("""
**Operational Excellence, Delivered** - Real-time vibration monitoring with live animation
""")

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("üéõÔ∏è Configuration")
    
    fault_type = st.selectbox(
        "**Fault Type**",
        ["Normal Operation", "Bearing_Fault_Mild", "Bearing_Fault_Severe", "Imbalance", "Misalignment"]
    )

    severity = st.slider("**Fault Severity**", 1, 5, 1)
    dampers_enabled = st.checkbox("**Enable Active Dampers**", value=True)
    
    # –†–µ–∂–∏–º –∞–Ω–∏–º–∞—Ü–∏–∏
    animation_speed = st.slider("**Animation Speed**", 1, 10, 5)
    show_animation = st.checkbox("**Show Live Animation**", value=True)
    
    # –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with st.expander("‚öôÔ∏è Engineering Settings"):
        sample_rate = st.number_input("Sample Rate (Hz)", 1000, 50000, 10000)
        buffer_size = st.number_input("Buffer Size", 256, 4096, 1000)
        num_sensors = st.selectbox("Number of Sensors", [1, 2, 4, 8], index=2)
    
    run_simulation = st.button("‚ñ∂Ô∏è Start Live Simulation", type="primary")

# –ú–µ—Å—Ç–æ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
animation_placeholder = st.empty()
engineering_placeholder = st.empty()

if run_simulation and show_animation:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
    num_frames = 50
    time_points = np.linspace(0, 0.1, buffer_size)
    
    for frame in range(num_frames):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = (frame + 1) / num_frames
        progress_bar.progress(progress)
        status_text.text(f"üé¨ Live Simulation: Frame {frame+1}/{num_frames}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å "–¥—Ä–µ–π—Ñ–æ–º" –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        base_frequency = 50 + 2 * np.sin(frame * 0.1)  # –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã
        base_signal = np.sin(2 * np.pi * base_frequency * time_points)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º (–º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
        noise_level = 0.1 + 0.05 * np.sin(frame * 0.2)
        base_signal += noise_level * np.random.randn(buffer_size)
        
        # –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        if fault_type == "Normal Operation":
            signal_data = base_signal
            fault_detected = False
            impulses = np.zeros_like(time_points)
            
        elif "Bearing_Fault" in fault_type:
            # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø—É–ª—å—Å—ã (–ø–æ—è–≤–ª—è—é—Ç—Å—è/–∏—Å—á–µ–∑–∞—é—Ç)
            impulse_phase = frame * 0.3
            impulse_times = np.arange(0.0, time_points[-1] + 1e-9, 0.02)
            impulses = np.zeros_like(time_points)
            
            for t in impulse_times:
                idx = np.argmin(np.abs(time_points - t))
                decay = np.exp(-80.0 * (time_points - t) ** 2)
                impulse_strength = severity * (0.3 + 0.2 * np.sin(impulse_phase))
                impulses += impulse_strength * decay
                
            signal_data = base_signal + impulses
            fault_detected = severity > 2
            
        elif fault_type == "Imbalance":
            # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å (–ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞)
            imbalance_strength = 0.3 * severity * (1 + 0.2 * np.sin(frame * 0.4))
            signal_data = base_signal * (1 + imbalance_strength * np.sin(2 * np.pi * base_frequency * time_points))
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏
            spikes = (np.random.rand(buffer_size) < 0.01 * severity).astype(float) * severity * 0.2
            signal_data += spikes
            fault_detected = severity > 1
            
        elif fault_type == "Misalignment":
            # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞ (–º–µ–Ω—è—é—â–∞—è—Å—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞)
            harmonic_strength = 0.5 * severity * (1 + 0.1 * np.sin(frame * 0.3))
            harmonic_2x = harmonic_strength * np.sin(2 * np.pi * 2 * base_frequency * time_points + frame * 0.2)
            
            # –°–ª—É—á–∞–π–Ω—ã–µ —É–¥–∞—Ä—ã
            impacts = (np.random.rand(buffer_size) < 0.005 * severity).astype(float) * severity * 0.4
            signal_data = base_signal + harmonic_2x + impacts
            fault_detected = severity > 1

        # –ú–æ–¥–µ–ª—å –¥–µ–º–ø—Ñ–µ—Ä–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        if dampers_enabled and fault_detected:
            # –î–µ–º–ø—Ñ–µ—Ä—ã "–≤–∫–ª—é—á–∞—é—Ç—Å—è" –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏
            damper_progress = min(1.0, frame / 10.0)
            max_force = severity * 1600 * damper_progress
            
            damper_force = np.zeros_like(time_points)
            for i in range(len(time_points)):
                if i > 50:  # –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫–ª–∏–∫–∞
                    damper_force[i] = min(max_force, severity * 1600 * (1 - np.exp(-i/100)))
            
            suppression_factor = np.exp(-0.3 * damper_force/8000)
            suppressed_signal = signal_data * suppression_factor
            
        else:
            damper_force = 500 * np.ones_like(time_points)
            suppressed_signal = signal_data * 0.98  # –õ–µ–≥–∫–æ–µ –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ

        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        fig = go.Figure()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª —Å –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        fig.add_trace(go.Scatter(
            x=time_points * 1000,  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            y=signal_data,
            mode='lines',
            name='Vibration Signal',
            line=dict(color='blue', width=2),
            opacity=0.8
        ))
        
        # –ò–º–ø—É–ª—å—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if "Bearing_Fault" in fault_type:
            fig.add_trace(go.Scatter(
                x=time_points * 1000,
                y=impulses,
                mode='lines',
                name='Bearing Impacts',
                line=dict(color='orange', width=3),
                opacity=0.6
            ))
        
        # –ü–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–µ—Å–ª–∏ –¥–µ–º–ø—Ñ–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã)
        if dampers_enabled and fault_detected:
            fig.add_trace(go.Scatter(
                x=time_points * 1000,
                y=suppressed_signal,
                mode='lines',
                name='Suppressed Vibration',
                line=dict(color='green', width=3),
                opacity=0.7
            ))
            
            # –°–∏–ª–∞ –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –æ—Å—å)
            fig.add_trace(go.Scatter(
                x=time_points * 1000,
                y=damper_force/50,  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                mode='lines',
                name='Damper Force (N/50)',
                line=dict(color='red', width=2, dash='dot'),
                yaxis='y2',
                opacity=0.6
            ))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        fig.update_layout(
            title=f"üé¨ Live Vibration Monitoring - Frame {frame+1}/{num_frames}",
            xaxis_title="Time (milliseconds)",
            yaxis_title="Vibration Amplitude",
            yaxis2=dict(
                title="Damper Force (N/50)",
                overlaying='y',
                side='right',
                range=[0, 200]  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å–∏–ª—ã
            ),
            height=400,
            showlegend=True,
            template="plotly_white"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        fig.add_annotation(
            x=0.02, y=0.98,
            xref="paper", yref="paper",
            text=f"Frequency: {base_frequency:.1f} Hz<br>Frame: {frame+1}",
            showarrow=False,
            bgcolor="white",
            bordercolor="black",
            borderwidth=1
        )
        
        if fault_detected:
            fig.add_annotation(
                x=0.98, y=0.98,
                xref="paper", yref="paper",
                text="üö® FAULT DETECTED",
                showarrow=False,
                bgcolor="red",
                font=dict(color="white")
            )

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animation_placeholder.plotly_chart(fig, use_container_width=True)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        time.sleep(0.5 / animation_speed)
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    progress_bar.empty()
    status_text.success("‚úÖ Live simulation completed!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω–∂–µ–Ω–µ—Ä–Ω—É—é –ø–∞–Ω–µ–ª—å
    with engineering_placeholder.container():
        show_engineering_panel(signal_data, suppressed_signal, fault_detected, 
                             severity, fault_type, dampers_enabled)

else:
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    if run_simulation:
        # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ ...
        pass

def show_engineering_panel(signal_data, suppressed_signal, fault_detected, 
                          severity, fault_type, dampers_enabled):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏"""
    
    st.subheader("üîß Engineering Analysis - Final Frame")
    
    # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    rms = np.sqrt(np.mean(signal_data**2))
    pkpk = np.ptp(signal_data)
    crest = np.max(np.abs(signal_data)) / rms if rms > 0 else 0
    
    if dampers_enabled and fault_detected:
        vibration_reduction = (1 - np.std(suppressed_signal)/np.std(signal_data)) * 100
    else:
        vibration_reduction = 0
    
    # –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("RMS Vibration", f"{rms:.4f}")
        st.metric("Peak-to-Peak", f"{pkpk:.3f}")
        
    with col2:
        st.metric("Crest Factor", f"{crest:.2f}")
        st.metric("Vibration Reduction", f"{vibration_reduction:.1f}%")
        
    with col3:
        status = "üü¢ NORMAL" if not fault_detected else "üî¥ FAULT"
        st.metric("System Status", status)
        st.metric("Fault Severity", severity)

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏, CTA) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
