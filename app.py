import streamlit as st
import numpy as np
from scipy import signal
import plotly.graph_objects as go

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="AVCS DNA Simulator", layout="wide")
st.title("üõ†Ô∏è AVCS DNA Technology Simulator")
st.markdown("""
**Experience Active Vibration Control with Real-time Damper Response**
This simulator demonstrates how our system detects AND suppresses faults in real-time.
""")

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("Configuration")
    
    fault_type = st.selectbox(
        "**Select Fault Type**",
        ["Normal Operation", "Bearing Fault (Mild)", "Bearing Fault (Severe)", "Imbalance", "Misalignment"]
    )

    severity = st.slider("**Fault Severity**", 1, 5, 1)
    
    # –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†: –í–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–º–ø—Ñ–µ—Ä–æ–≤
    dampers_enabled = st.checkbox("**Enable Active Dampers**", value=True)
    
    run_simulation = st.button("‚ñ∂Ô∏è Run Simulation", type="primary")

with col2:
    st.subheader("Simulation Output")

    if run_simulation:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
        sample_rate = 10000
        duration = 0.1
        t = np.linspace(0, duration, int(sample_rate * duration))
        base_signal = np.sin(2 * np.pi * 50 * t) + 0.1 * np.random.randn(len(t))

        # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
        if fault_type == "Normal Operation":
            signal_data = base_signal
            fault_detected = False
        elif "Bearing Fault" in fault_type:
            impulse_prob = 0.001 * severity
            impulses = (np.random.rand(len(t)) < impulse_prob).astype(float) * severity * 0.5
            signal_data = base_signal + impulses
            fault_detected = severity > 2
        elif fault_type == "Imbalance":
            imbalance_effect = 0.5 * severity
            signal_data = base_signal * (1 + imbalance_effect * np.sin(2 * np.pi * 50 * t))
            impulses = (np.random.rand(len(t)) < 0.003 * severity).astype(float) * severity * 0.3
            signal_data = signal_data + impulses
            fault_detected = severity > 1
        elif fault_type == "Misalignment":
            harmonic_2x = 0.7 * severity * np.sin(2 * np.pi * 100 * t + np.pi/4)
            impulses = (np.random.rand(len(t)) < 0.005 * severity).astype(float) * severity * 0.8
            signal_data = base_signal + harmonic_2x + impulses
            fault_detected = severity > 1

        # –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø: –ú–û–î–ï–õ–¨ –†–ê–ë–û–¢–´ –î–ï–ú–ü–§–ï–†–û–í
        if dampers_enabled:
            if fault_detected:
                # –ê–ö–¢–ò–í–ù–û–ï –ü–û–î–ê–í–õ–ï–ù–ò–ï - –¥–µ–º–ø—Ñ–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å
                damper_response_time = 0.02  # 20 ms response
                response_samples = int(damper_response_time * sample_rate)
                
                # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–º–ø—Ñ–µ—Ä–æ–≤
                damper_force = np.zeros_like(t)
                for i in range(len(t)):
                    if i > response_samples:
                        damper_force[i] = min(8000, severity * 1600 * (1 - np.exp(-i/response_samples)))
                
                # –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
                suppression_factor = np.exp(-0.5 * damper_force/8000)
                suppressed_signal = signal_data * suppression_factor
                
            else:
                # –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú - –ª–µ–≥–∫–æ–µ –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ
                damper_force = 500 * np.ones_like(t)  # –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ 500 –ù
                suppressed_signal = signal_data * 0.95  # –õ–µ–≥–∫–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
        else:
            # –î–µ–º–ø—Ñ–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
            damper_force = np.zeros_like(t)
            suppressed_signal = signal_data

        # –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
        fig = go.Figure()
        
        # –ì—Ä–∞—Ñ–∏–∫ –≤–∏–±—Ä–∞—Ü–∏–∏
        fig.add_trace(go.Scatter(
            y=signal_data, 
            mode='lines', 
            name='Original Vibration', 
            line=dict(color='blue', width=1)
        ))
        
        if dampers_enabled:
            fig.add_trace(go.Scatter(
                y=suppressed_signal, 
                mode='lines', 
                name='Suppressed Vibration', 
                line=dict(color='green', width=2)
            ))
            
            # –ì—Ä–∞—Ñ–∏–∫ —Å–∏–ª—ã –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –º–∞—Å—à—Ç–∞–±–µ)
            fig.add_trace(go.Scatter(
                y=damper_force/20,  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                mode='lines', 
                name='Damper Force (N/20)', 
                line=dict(color='red', width=2, dash='dot'),
                yaxis='y2'
            ))
        
        fig.update_layout(
            title="Vibration Control System Response",
            xaxis_title="Time (samples)",
            yaxis_title="Vibration Amplitude",
            yaxis2=dict(
                title="Damper Force (N/20)",
                overlaying='y',
                side='right'
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)

        # –ò–ù–î–ò–ö–ê–¢–û–†–´ –°–ò–°–¢–ï–ú–´
        col_status, col_force, col_efficiency = st.columns(3)
        
        with col_status:
            if fault_detected:
                if dampers_enabled:
                    st.error("üö® **FAULT DETECTED - ACTIVE SUPPRESSION**")
                else:
                    st.error("üö® **FAULT DETECTED - DAMPERS OFF**")
            else:
                st.success("‚úÖ **SYSTEM NORMAL**")
        
        with col_force:
            max_force = np.max(damper_force) if dampers_enabled else 0
            st.metric("üîß Max Damper Force", f"{max_force:.0f} N")
        
        with col_efficiency:
            if dampers_enabled and fault_detected:
                vibration_reduction = (1 - np.std(suppressed_signal)/np.std(signal_data)) * 100
                st.metric("üìâ Vibration Reduction", f"{vibration_reduction:.1f}%")

        # –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò
        st.subheader("Technical Metrics")
        col_rms, col_crest, col_peak = st.columns(3)
        
        original_rms = np.sqrt(np.mean(signal_data**2))
        suppressed_rms = np.sqrt(np.mean(suppressed_signal**2)) if dampers_enabled else original_rms
        
        col_rms.metric("RMS Vibration", f"{original_rms:.4f}", f"{-((original_rms - suppressed_rms)/original_rms*100):.1f}%")
        col_crest.metric("Crest Factor", f"{np.max(np.abs(signal_data))/original_rms:.2f}")
        col_peak.metric("Peak Reduction", f"{np.max(np.abs(suppressed_signal))/np.max(np.abs(signal_data))*100:.1f}%")

# –û–°–¢–ê–õ–¨–ù–´–ï –°–ï–ö–¶–ò–ò (Business Impact, CTA) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
